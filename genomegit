#!/bin/bash

# List of dependecies: Git, Python, MUMmer, tabix
# If the argument does not corresponds with any of the custom genomeGit commands, it will simply pass it to Git.


#	PART I. CHECK THE ENVIRONMENT

#Save the current working directory
path=$(pwd)
#Obtain the script location
source="$( cd "$( dirname "$(readlink ${BASH_SOURCE[0]})" )" && pwd )"

echo "genomeGit source at: $source"

#genomeGit requires python 2.7 or above to function properly. Check if it is installed
command -v python >/dev/null 2>&1 || { echo "genomeGit requires python, but no python installation was found in this machine.  Now aborting."; exit 0;}
#Do the same with git
command -v git >/dev/null 2>&1 || { echo "genomeGit requires git, but no git installation was found in this machine.  Now aborting."; exit 0;}

#Check if genomegit has been installed. To do this, check that all the necessary files are in the path.
for filename in "$source/ShowHelp.txt" "$source/parse_file.bash" "$source/review.py" "$source/reconstruct.py" "$source/report.py" "$source/discarded.py"; do
   if ! [ -e $filename ]; then
      echo "genomeGit can't find $filename, please make sure to install genomeGit before running it using the provided executable file genomegit_install, and that no files are removed from the genomeGit source code directory."
      exit 0
   fi
done


#	PART II. EXECUTE THE COMMAND

# If there are no arguments ($# - number of passed arguments)
if [ "$#" = 0 ]; then
   # Welcome message
   echo "Welcome to genomeGit! Use 'genomegit help' for usage information."

   # If the 1st argument is help
elif [ "$1" = "help" ]; then
   #Display help message contained in ShowHelp.txt file
   cat $source/ShowHelp.txt

   # Cloning the repositry
elif [ "$1" = "clone" ]; then
   #Checking for .gnmgit repo
   if [ -d ".gnmgit" ]; then
      echo "A genomegit repository already exists, repository cannot be cloned."
      exit 0
      #Clone the specified repository
   else
      git $@ $path/.gnmgit
   fi

   # Initializing the repository
elif [ "$1" = "init" ]; then
   # Does repository exist already?
   if [ -d ".gnmgit" ]; then
      echo "The repository cannot be initialized, as anoter one exists already."
   else
      mkdir .gnmgit
      cd .gnmgit
      git $@
   fi

   #If the user wants to add a file
elif [ "$1" = "add" ]; then
   #Shift arguments
   shift
   #Check if a .gnmgit repo is already created
   if [ -d ".gnmgit" ]; then
      cd .gnmgit
      #Check if at least the mandatory argument was given
      if [ $# -ge 1 ]; then
         #Default the threads to 1 and the tlength to 1KB
         threads=1
         tlength=1000
         aligner=2
         percent_identity=95
         kmer=16
         segLength=5000
         c_flag=2000
         b_flag=1
         merge_or_split_flag=1
         #Loop through the arguments
         for WORD; do
            case $WORD in
                  #If the current argument is the optional number of threads
               --t=*|--threads=*)
                  #Determine the number of threads selected
                  threads=${1#*=}
                  #Determine if the threads is a valid input, otherwise default it back to 1
                  if ! [[ "$threads" =~ ^[0-9]+$ ]] || ! [ "$threads" -ge 1 ]; then
                     echo "Invalid threads selection, defaulting it to 1 thread."
                     threads=1
                  fi
                  #Next arg
                  shift
                  ;;
                  #If the current argument is the optional template max lenght
               --tlength=*)
                  #Determine the template max lenght selected
                  tlength=${1#*=}
                  #Determine if the template max lenght is a valid input, otherwise default it back to 1000
                  if ! [[ "$tlength" =~ ^[0-9]+$ ]] || ! [ "$tlength" -ge 1 ]; then
                     echo "Invalid template maximum lenght selection, defaulting it to 1Kbp."
                     tlength=1
                  fi
                  #Shift the arguments (jump to the next)
                  shift
                  ;;
               --a=*|--aligner=*)
                  #Determine which aligner was chosen
                  aligner=${1#*=}
                  if ! [[ "$aligner" =~ ^[1-2]+$ ]] || ! [ "$aligner" -ge 1 ]; then
                     echo "Invalid aligner selection, defaulting it to nucmer."
                     aligner=2
                  fi
                  #Shift the arguments (jump to the next)
                  shift
                  ;;
               --c=*|--mincluster=*)
                 #Determine the value of the c flag used for nucmer
                 c_flag=${1#*=}
                 if ! [[ "$c_flag" =~ ^[0-9]+$ ]] || ! [ "$c_flag" -ge 1 ]; then
                    echo "Invalid c value provided, defaulting it to 2000."
                    c_flag=2000
                 fi
                 #Shift the arguments (jump to the next)
                 shift
                 ;;
               # --b=*|--breaklen=*)
               #   #Determine the value of the b flag used for nucmer
               #   b_flag=${1#*=}
               #   if ! [[ "$b_flag" =~ ^[0-9]+$ ]] || ! [ "$b_flag" -ge 1 ]; then
               #      echo "Invalid b value provided, defaulting it to 1."
               #      b_flag=1
               #   fi
               #   #Shift the arguments (jump to the next)
               #   shift
               #   ;;
                 #If the current argument is the optional number of threads
              --ms=*)
                 #Determine the number of threads selected
                 merge_or_split_flag=${1#*=}
                 #Determine if the threads is a valid input, otherwise default it back to 1
                 if ! [[ "$merge_or_split_flag" =~ ^[1-2]+$ ]] || ! [ "$merge_or_split_flag" -ge 1 ]; then
                    echo "Invalid option selected, defaulting it to splits."
                    merge_or_split_flag=1
                 fi
                 #Next arg
                 shift
                 ;;
               --k=*|--kmer=*)
                  #Determine which aligner was chosen
                  kmer=${1#*=}
                  if ! [[ "$kmer" =~ ^[0-9]+$ ]] || ! [ "$kmer" -ge 1 ]; then
                     echo "Invalid k-mer selected, defaulting it to 16."
                     kmer=16
                  fi
                  #Shift the arguments (jump to the next)
                  shift
                  ;;
               --s=*|--segLength=*)
                  #Determine which aligner was chosen
                  segLength=${1#*=}
                  if ! [[ "$segLength" =~ ^[0-9]+$ ]] || ! [ "$segLength" -ge 1 ]; then
                     echo "Invalid segment length selected, defaulting it to 5000."
                     segLength=5000
                  fi
                  #Shift the arguments (jump to the next)
                  shift
                  ;;
                  #If the current argument is the optional --no-update, avoid the auto update
                --pi=*)
                   #Determine which aligner was chosen
                   percent_identity=${1#*=}
                   if ! [[ "$percent_identity" =~ ^[0-9]+$ ]] || ! [ "$percent_identity" -ge 1 ]; then
                      echo "Invalid percent identity value, defaulting it to 95."
                      percent_identity=95
                   fi
                   #Shift the arguments (jump to the next)
                   shift
                   ;;
               --no-update*)
                  #Inform the user
                  echo "*ATTENTION: --no-update optional parameter has been provided: no auto-update will be performed upon request of the user."
                  #Shift arguments
                  shift
                  #Loop through the provided files (the argument might be a group of files)
                  for filepath in "$@"; do
                     #Check that the input file is valid. First, check if it is a relative path
                     if [ -e ${path}/$filepath ]; then
                        filename=${path}/$filepath
                        #Check if the third argument corresponds with a full file path
                     elif [ -e $filepath ]; then
                        filename=$filepath
                        #Otherwise it is invalid file location
                     else
                        echo "ERROR: $filepath file was not found. Please make sure to provide a valid input file."
                        exit 0
                     fi
                     #Classify the file
                     class=$(python $source/classify.py $filename)
                     #Check if the file corresponds with a non-genome dataset and parse it normally
                     if [ "$class" = "Annotation" ] || [ "$class" = "Variants" ] || [ "$class" = "Alignment" ]; then
                        #Save the file size in MB
                        filesize=$(wc -c < $filename | awk '{foo = $1; printf("%.5f", foo)}')
                        echo ""
                        echo "$class dataset detected. Now parsing $filename into git-compatible objects."
                        #Parse and add the dataset. Arguments: class file threads size tlenght
                        bash $source/parse_file.bash "$class" "$filename" "$threads" "$filesize" "$tlength" "$aligner"\
                           "$percent_identity" "$kmer" "$segLength" "$c_flag" "$b_flag" "$merge_or_split_flag"
                        #if it corresponds with a genome dataset, do not perform auto-update
                     elif [ "$class" = "Genome" ]; then
                        #Save the file size in MB
                        filesize=$(wc -c < $filename | awk '{foo = $1; printf("%.5f", foo)}')
                        echo ""
                        echo "$class dataset detected. Now parsing $filename into git-compatible objects."
                        #If there is a Genome folder already in the repo this is an update.
                        if [ -d "Genome" ]; then
                           update=1
                           rm -r ./Genome
                        else
                           update=0
                        fi
                        #Create a new folder and get inside
                        mkdir ./Genome
                        cd ./Genome
                        ##Create seqIDs file inside the directory
                        grep -o -E "^>.*" $filename > SeqIDs.txt
                        #Determine the number of sequences
                        sequence_number=$(grep -c ">" $filename)
                        if [ "$sequence_number" = "0" ]; then
                           echo ""
                           echo "***INPUT ERROR: The input file contains no sequences. Please make sure to input a valid FASTA file.***"
                           echo ""
                           rm -r ../$1
                           exit 0
                        fi
                        #Inform the user
                        echo "Now processing $filename containing a Genome dataset with $sequence_number sequences:"
                        date
                        #Call python script to parse all the sequences in the input file. class filename filesize update
                        python $source/parse.py $class $filename $filesize $update
                        #Inform the user
                        echo "Genome parsing finished:"
                        date
                        echo ""
                        #Go back to the home directory
                        cd ..
                        #Otherwise it was an invalid file
                     else
                        echo "Unrecognised file format: $filename"
                        echo "The file will not be processed and stored."
                        continue
                     fi
                  done
                  #Add the files to the git repository
                  echo ""
                  echo "File parsing completed, now adding all the git-compatible objects into the repository."
                  date
                  git add -A .
                  #Inform the user
                  echo ""
                  echo "All information successfully added to the repository."
                  date
                  exit 0
                  ;;
                  #If the current argument is not an optional parameter it must be the file
               *)
                  #Loop through the provided files (the argunebt might be a group of files)
                  for filepath in "$@"; do
                     #Check that the input file is valid. First, check if it is a relative path
                     if [ -e ${path}/$filepath ]; then
                        filename=${path}/$filepath
                        #Check if the third argument corresponds with a full file path
                     elif [ -e $filepath ]; then
                        filename=$filepath
                        #Otherwise it is invalid file location
                     else
                        echo "ERROR: $filepath file was not found. Please make sure to provide a valid input file."
                        exit 0
                     fi
                     #Classify the file
                     class=$(python $source/classify.py $filename)
                     #Check if the file corresponds with a valid dataset
                     if [ "$class" = "Genome" ] || [ "$class" = "Annotation" ] || [ "$class" = "Variants" ] || [ "$class" = "Alignment" ]; then
                        #Save the file size in MB
                        filesize=$(wc -c < $filename | awk '{foo = $1; printf("%.5f", foo)}')
                        echo ""
                        echo "$class dataset detected. Now parsing $filename into git-compatible objects."
                        #Parse and add the dataset. Arguments: class file threads size tlenght
                        bash $source/parse_file.bash "$class" "$filename" "$threads" "$filesize" "$tlength" "$aligner"\
                           "$c_flag" "$b_flag" "$percent_identity" "$kmer" "$segLength" "$merge_or_split_flag"
                        #Otherwise it was an invalid file
                     else
                        echo "Unrecognised file format: $filename"
                        echo "The file will not be processed and stored."
                        continue
                     fi
                  done
                  #Add the files to the git repository
                  echo ""
                  echo "File parsing completed, now adding all the git-compatible objects into the repository."
                  date
                  git add -A .
                  #Inform the user
                  echo ""
                  echo "All information successfully added to the repository."
                  date
                  exit 0
                  ;;
            esac
         done
         #Inform the user there are mandatory arguments missing
      else
         echo "Arguments missing. Please make sure to provide the location of the input file to be added."
         exit 0
      fi
      #Inform the user to initiate a repo before adding
   else
      echo "No gnmgit repository detected. Use genomegit init to initiate one."
      exit 0
   fi

   #Reconstruct the file
elif [ "$1" = "get" ]; then
   #Shift arguments
   shift
   #Check if a .gnmgit repo exists
   if [ -d ".gnmgit" ]; then
      cd .gnmgit
      #Default the parameters
      region=0
      sequence=0
      filename=0
      dataset=0
      commit=0
      bam=0
      #Loop through the arguments
      for WORD; do
         case $WORD in
               #If the current argument is the optional dataset
            --dataset=*)
               #Determine the selected sequence
               dataset=${1#*=}
               #Shift the arguments (jump to the next)
               shift
               ;;
               #If the current argument is the optional sequence ID
            --sequence=*)
               #Determine the selected sequence
               sequence=${1#*=}
               #Shift the arguments (jump to the next)
               shift
               ;;
               #If the current argument is the optional sequence region
            --region=*)
               #Determine the selected region
               region=${1#*=}
               #Shift the arguments (jump to the next)
               shift
               ;;
               #If the current argument is the optional message
            --message=*)
               #Determine the commit hash associated to that message (in case of multiple ones, the first one will be selected)
               commit=$(git log --grep="${1#*=}" --format=%H -n 1)
               #Shift the arguments (jump to the next)
               shift
               ;;
               #If the current argument is the optional commit
            --commit-hash=*)
               #Determine the selected commit
               commit=${1#*=}
               #Shift the arguments (jump to the next)
               shift
               ;;
               #If the current argument is the optional commit
            --bam=*)
               #Determine if the user wants conversion to BAM (1 is convert)
                  bam=${1#*=}
                  if ! [[ "$bam" =~ ^[0-1]+$ ]] || ! [ "$bam" -ge 0 ]; then
                     echo "Invalid argument, defaulting to no conversion."
                     bam=0
                  fi
               #Shift the arguments (jump to the next)
               shift
               ;;
               #If the current argument is not an optional parameter it must be the file name
            *)
               #Determine the selected file
               filename=$1
               #Shift the arguments (jump to the next)
               shift
               ;;
         esac
      done
      #Change .bam to .sam if user wants BAM back (only .sam is stored in repo)
      if [[ $filename == *".bam" ]]; then
	        filename=$(basename $filename)
            filename=${filename/.bam/'.sam'}
      fi
      #If the user is interested in a different commit / message than current one
      if ! [ "$commit" = "0" ]; then
         #Checkout the desired commit hash
         git checkout $commit
         #Reconstruct. Arguments: filename dataset sequence region
         python $source/reconstruct.py $filename $dataset $sequence $region $bam
         #Checkout back to the master
         git checkout master
         #Otherwise reconstruct normally
      else
         #Reconstruct. Arguments: filename dataset sequence region
         python $source/reconstruct.py $filename $dataset $sequence $region $bam
      fi
      #Otherwise the user must create a repo before
   else
      echo "No gnmgit repository detected. Use genomegit init to initiate one."
      exit 0
   fi

   #Delete a file
elif [ "$1" = "delete" ]; then
   #Shift the arguments
   shift
   #Check if a .gnmgit repo exists
   if [ -d ".gnmgit" ]; then
      cd .gnmgit
      #Check if the number of arguments is valid
      if [ $# = "1" ]; then
         #Delete the dataset
         python $source/delete.py $1
         exit 0
      else
         echo "Invalid number of arguments. Please make sure to provide the name of the file to be deleted."
         exit 0
      fi
      #Otherwise the user must create a repo before
   else
      echo "No gnmgit repository detected. Use genomegit init to initiate one."
      exit 0
   fi

   # See files stored in the repo
elif [ "$1" = "list" ]; then
   #Check if a .gnmgit repo exists
   if [ -d ".gnmgit" ]; then
      cd .gnmgit
      #Check if there is a repomap
      if [ -f ./RepoMap.txt ]; then
         #List the files contained in the repository and their respective dataset
         python $source/list_files.py ./RepoMap.txt
         exit 0
         #Otherwise the erpository is empty
      else
         echo "This genomegit repository is currently empty."
         exit 0
      fi
   else
      echo "No gnmgit repository detected. Use genomegit init to initiate one."
      exit 0
   fi

   # Obtaining the discarded entries of a given dataset
elif [ "$1" = "discarded" ]; then
   #Check if .gnmgit repo exists
   if [ -d ".gnmgit" ]; then
      #Enter the repository
      cd .gnmgit
      #Check if at least the mandatory second argument was given (indicates the dataset of interest)
      if [ "$#" = 2 ]; then
         python $source/discarded.py $2
         #Inform the user tha the number of arguments was incorrect
      else
         echo "Incorrect number of arguments. Please make sure to specify the discarded dataset of the file to be retrieved."
         exit 0
      fi
      #Inform the user there is not .gnmgit repo
   else
      echo "No gnmgit repository detected. Use genomegit init to initiate one."
      exit 0
   fi

   #Summary of changes between versions
elif [ "$1" = "diff" ]; then
   #Check if mummer installation exists in the machine. Abort if not.
   command -v mummer >/dev/null 2>&1 || { echo "genomeGit requires MUMmer to produce reviews, but no MUMmer installation was found in this machine.  Now aborting."; exit 0;}
   command -v tabix >/dev/null 2>&1 || { echo "genomeGit requires Tabix to produce reviews, but no Tabix installation was found in this machine.  Now aborting."; exit 0;}
   #Shift arguments
   shift
   #Check if .gnmgit repo exists and get inside if so
   if [ -d ".gnmgit" ]; then
      cd .gnmgit
      #Default the threads to 1 and the report to 0
      threads=1
      message=0
      merge=0
      #Loop through the arguments
      for WORD; do
         case $WORD in
               #If the current argument is the optional number of threads
            --threads=*)
               #Determine the number of threads selected
               threads=${1#*=}
               #Determine if the threads is a valid input, otherwise default it back to 1
               if ! [[ "$threads" =~ ^[0-9]+$ ]] || ! [ "$threads" -ge 1 ]; then
                  echo "Invalid threads selection, defaulting it to 1 thread."
                  threads=1
               fi
               #Shift the arguments (jump to the next)
               shift
               ;;
               #If the current argument is the optional message, the user will provide the commit messages
            --message*)
               message=1
               #Shift the arguments (jump to the next)
               shift
               ;;
               #If the current argument is the optional merge argument
            --merge*)
               merge=1
               #Shift arguments
               shift
               ;;
         esac
      done
      #If the user provided a message, determine the commit hash associated to them (in case of multiple ones, the first one will be selected)
      if ! [ "$message" = "0" ]; then
         #Determine the commit hash associated to the messages provide
         commit_A=$(git log --grep="${1#*=}" --format=%H -n 1)
         commit_B=$(git log --grep="${2#*=}" --format=%H -n 1)
         #If the user provided a commit hash
      else
         #Determine the commit hash provided
         commit_A=$1
         commit_B=$2
      fi
      #Run the summary. Arguments: commitA commitB threads merge
      python $source/review.py $commit_A $commit_B $threads $merge
   else
      #Inform the user ther is no .gnmgit repo
      echo "No genomegit repository detected. Use genomegit init to initiate one."
      exit 0
   fi

   #Report the current status of the repository
elif [ "$1" = "report" ]; then
   #Shift (jumo next argument)
   shift
   #Check if .gnmgit repo exists and get inside if so
   if [ -d ".gnmgit" ]; then
      cd .gnmgit
      #Default parameters
      commit=0
      #Loop through the arguments
      for WORD; do
         case $WORD in
               #If the current argument is the optional commit hash
            --commit-hash=*)
               #Determine the commit hash selected
               commit=${1#*=}
               #Shift the arguments (jump to the next)
               shift
               ;;
               #If the current argument is the optional message, the user will provide the commit message
            --message=*)
               #Determine the commit hash associated to the provided message
               commit=$(git log --grep="${1#*=}" --format=%H -n 1)
               #Shift the arguments (jump to the next)
               shift
               ;;
         esac
      done
      #Run the report. Optional arguments: commit-hash
      python $source/report.py $commit
      #Inform the user ther is no .gnmgit repo
   else
      echo "No genomegit repository detected. Use genomegit init to initiate one."
      exit 0
   fi

   # If the first argument does not correspond with any of the previous, let git handle it.
else
   #Check if .gnmgit repo exists
   if [ -d ".gnmgit" ]; then
      cd .gnmgit
      git $@
   else
      echo "genomeGit repository not found. Please create one before running any other commands."
      exit 0
   fi

fi
